{"version":3,"sources":["Components/Header/Header.js","Components/Footer/Footer.js","Components/Card/Cards.js","Components/Wrapper/Wrapper.js","Components/Game/Game.js","serviceWorker.js","index.js"],"names":["Header","props","className","newScore","newHighscore","Footer","style","position","left","bottom","width","height","textAlign","backgroundColor","Cards","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Game","state","cards","score","highscore","handleCorrectGuess","newCard","newHighScore","Math","max","setState","shuffleCard","handleIncorrectGuess","resetCards","alert","map","item","clicked","i","length","k","floor","random","temp","guessCorrectly","newItem","this","card","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g7CAciBA,G,MAXE,SAAAC,GAAK,OAChB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,SAAf,eACA,yBAAKA,UAAU,UAAf,UACUD,EAAME,SADhB,cAEcF,EAAMG,iBCSfC,MAff,WACI,OACI,yBAAKC,MAAO,CACRC,SAAU,QACVC,KAAM,IACNC,OAAQ,IACRC,MAAO,OACPC,OAAQ,MACRC,UAAW,SACXC,gBAAiB,gBCAdC,G,MARD,SAAAb,GAAK,OACjB,yBAAKC,UAAU,OAAOa,QAAS,kBAAMd,EAAMe,WAAWf,EAAMgB,MAC1D,yBAAKf,UAAU,iBACb,yBAAKgB,IAAKjB,EAAMkB,KAAMC,IAAKnB,EAAMoB,Y,aCCxBC,MAJf,SAAiBrB,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMsB,W,6jBC8F1BC,E,2MAxFXC,MAAQ,CACJC,QACAC,MAAO,EACPC,UAAW,G,EASfC,mBAAqB,SAAAC,GAAY,IAAD,EACC,EAAKL,MAA1BE,EADoB,EACpBA,MAAOC,EADa,EACbA,UACTzB,EAAWwB,EAAQ,EACnBI,EAAeC,KAAKC,IAAI9B,EAAUyB,GACxC,EAAKM,SAAS,CACVR,MAAO,EAAKS,YAAYL,GACxBH,MAAOxB,EACPyB,UAAWG,K,EAInBK,qBAAuB,SAAAV,GAOnB,OANA,EAAKQ,SAAS,CACVR,MAAO,EAAKW,WAAWX,GACvBC,MAAO,IAEXW,MAAM,yBAAD,OAA0B,EAAKb,MAAME,QAC1C,EAAKO,SAAS,CAAEP,MAAO,KAChB,G,EAGXU,WAAa,SAAAX,GACT,IAAMW,EAAaX,EAAMa,KAAI,SAAAC,GAAI,YAAUA,EAAV,CAAgBC,SAAS,OAC1D,OAAO,EAAKN,YAAYE,I,EAG5BF,YAAc,SAAAT,GAEV,IADA,IAAIgB,EAAIhB,EAAMiB,OAAS,EAChBD,EAAI,GAAG,CACV,IAAME,EAAIZ,KAAKa,MAAMb,KAAKc,UAAYJ,EAAI,IACpCK,EAAOrB,EAAMgB,GACnBhB,EAAMgB,GAAKhB,EAAMkB,GACjBlB,EAAMkB,GAAKG,EACXL,IAEJ,OAAOhB,G,EAGXV,WAAa,SAAAC,GACT,IAAI+B,GAAiB,EACflB,EAAU,EAAKL,MAAMC,MAAMa,KAAI,SAAAC,GACjC,IAAIS,EAAO,KAAQT,GAOnB,OANIS,EAAQhC,KAAOA,IACVgC,EAAQR,UACTQ,EAAQR,SAAU,EAClBO,GAAiB,IAGlBC,KAEXD,EAAiB,EAAKnB,mBAAmBC,GAAW,EAAKM,qBAAqBN,I,mFAvD9EoB,KAAKhB,SAAS,CACVR,MAAOwB,KAAKf,YAAYe,KAAKzB,MAAMC,W,+BA2DjC,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,KACKwB,KAAKzB,MAAMC,MAAMa,KAAI,SAAAY,GAAI,OACtB,kBAAC,EAAD,CACIlC,GAAIkC,EAAKlC,GACTmC,IAAKD,EAAKlC,GACVE,KAAMgC,EAAKhC,KACXE,MAAO8B,EAAK9B,MACZL,WAAY,EAAKA,iBAI7B,kBAAC,EAAD,W,GAnFGqC,IAAMC,WCGLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.06915bba.chunk.js","sourcesContent":["import React from 'react';\nimport './headStyle.css';\n\n    const Header = props => (\n        <div className=\"header\">\n          <div className=\"title\">Clicky Game</div>\n          <div className=\"scores\">\n            Score: {props.newScore} \n            Highscore: {props.newHighscore}\n          </div>\n        </div>\n      );\n  \n  \n  export default Header;","import React from 'react';\n\nfunction Footer() {\n    return (\n        <div style={{\n            position: \"fixed\",\n            left: \"0\",\n            bottom: \"0\",\n            width: \"100%\",\n            height: \"10%\",\n            textAlign: \"center\",\n            backgroundColor: \"lightblue\"\n        }}>\n        </div>\n    );\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./card.css\";\n\nconst Cards = props => (\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Cards;\n\n// className={`click-item ${props.shake} ? \"shake\" : \"\"`} \n// onClick={() => props.clickCount(props.id)}","import React from \"react\";\nimport \"./wrapper.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport Cards from '../Card/Cards';\nimport cards from '../../cards.json';\nimport Wrapper from '../Wrapper/Wrapper'\n\n// Import all components to game\n\nclass Game extends React.Component {\n    state = {\n        cards,\n        score: 0,\n        highscore: 0\n    };\n    \n    componentDidMount() {\n        this.setState({\n            cards: this.shuffleCard(this.state.cards)\n        })\n    };\n\n    handleCorrectGuess = newCard => {\n        const { score, highscore } = this.state;\n        const newScore = score + 1;\n        const newHighScore = Math.max(newScore, highscore);\n        this.setState({\n            cards: this.shuffleCard(newCard),\n            score: newScore,\n            highscore: newHighScore\n        })\n    };\n\n    handleIncorrectGuess = cards => {\n        this.setState({\n            cards: this.resetCards(cards),\n            score: 0\n        })\n        alert(`Game Over :( \\nscore: ${this.state.score}`);\n        this.setState({ score: 0 });\n        return true;\n    };\n\n    resetCards = cards => {\n        const resetCards = cards.map(item => ({ ...item, clicked: false }));\n        return this.shuffleCard(resetCards);\n    };\n\n    shuffleCard = cards => {\n        let i = cards.length - 1;\n        while (i > 0) {\n            const k = Math.floor(Math.random() * (i + 1));\n            const temp = cards[i];\n            cards[i] = cards[k];\n            cards[k] = temp;\n            i--;\n        }\n        return cards;\n    };\n\n    clickCount = id => {\n        let guessCorrectly = false;\n        const newCard = this.state.cards.map(item => {\n            var newItem = { ...item };\n            if (newItem.id === id) {\n                if (!newItem.clicked) {\n                    newItem.clicked = true;\n                    guessCorrectly = true;\n                }\n            }\n            return newItem;\n        })\n        guessCorrectly ? this.handleCorrectGuess(newCard) : this.handleIncorrectGuess(newCard)\n\n    };\n\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <Wrapper>\n                    {this.state.cards.map(card => (\n                        <Cards\n                            id={card.id}\n                            key={card.id}\n                            name={card.name}\n                            image={card.image}\n                            clickCount={this.clickCount}\n                        />\n                    ))}</Wrapper>\n\n                <Footer />\n            </div >\n        );\n    }\n    // game functions: onclick, shuffle, score\n}\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Components/Game/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}